# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: BuildWindowsWithSonarQube
  displayName: Build for Windows With SonarQube
  dependsOn: [] # by specifying an empty array, this stage doesn't depend on the stage before it
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'Peach'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'geoffray-azure-cmake-windows-test'
      cliProjectName: 'geoffray-azure-cmake-windows-test'
      cliSources: 'src'
      extraProperties: 'sonar.cfamily.build-wrapper-output=build_wrapper_output_directory'
  - pwsh: |
      rm build-wrapper-win-x86 -Recurse -Force -ErrorAction SilentlyContinue
      rm build-wrapper-win-x86 -Force -ErrorAction SilentlyContinue
      $path = ".\build-wrapper-win-x86.zip"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      (New-Object System.Net.WebClient).DownloadFile("${SONAR_URL}/static/cpp/build-wrapper-win-x86.zip", $path)
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::ExtractToDirectory($path, ".")
      del $path
    displayName: Install buildwrapper
  - pwsh: |
      rm build -Recurse -Force -ErrorAction SilentlyContinue
      mkdir build
      cd build
      cmake ..
      cd ..
    displayName: Prepare build
  - bash: |
      build-wrapper-win-x86/build-wrapper-win-x86-64 --out-dir build_wrapper_output_directory cmake --build build/ --config Release
    displayName: Compile project in build wrapper
  - task: SonarQubeAnalyze@4